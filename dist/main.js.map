{"version":3,"file":"main.js","sources":["../src/constants/status.constants.js","../index.js"],"sourcesContent":["/*\n * @Description:\n * @Version:\n * @Autor: qinjunyi\n * @Date: 2021-02-19 14:56:44\n * @LastEditors: qinjunyi\n * @LastEditTime: 2021-02-19 16:39:49\n */\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nexport { PENDING, FULFILLED, REJECTED }\n","/*\n * @Description:\n * @Version:\n * @Autor: qinjunyi\n * @Date: 2021-02-19 11:15:23\n * @LastEditors: qinjunyi\n * @LastEditTime: 2021-02-23 10:10:03\n */\nimport { status } from './src/constants/index.js'\n\nfunction MyPromise(executor) {\n  let self = this\n  self.status = status.PENDING\n  self.value = null\n  self.reason = null\n  self.onResolvedCallbacks = []\n  self.onRejectedCallbacks = []\n\n  function resolve(value) {\n    if (value instanceof MyPromise) {\n      value.then(resolve, reject)\n    }\n    if (self.status === status.PENDING) {\n      self.status = status.FULFILLED\n      self.value = value\n      self.onResolvedCallbacks.forEach((onResolvedCallback) => {\n        onResolvedCallback()\n      })\n    }\n  }\n  function reject(reason) {\n    if (self.status === status.PENDING) {\n      self.status = status.REJECTED\n      self.reason = reason\n      self.onRejectedCallbacks.forEach((onRejectedCallback) => {\n        onRejectedCallback()\n      })\n    }\n  }\n  try {\n    executor(resolve, reject)\n  } catch (err) {\n    reject(err)\n  }\n}\nfunction resolvePromise(promiseObj, result, resolve, reject) {\n  let called = false\n  if (promiseObj === result) return reject(new TypeError('循环引用'))\n  if (result instanceof MyPromise) {\n    // 对应标准2.3.2节\n    // 如果result的状态还没有确定，那么它是有可能被一个thenable决定最终状态和值的\n    // 所以这里需要做一下处理，而不能一概的以为它会被一个“正常”的值resolve\n    if (result.status === status.PENDING) {\n      result.then((val) => {\n        resolvePromise(promiseObj, val, resolve, reject)\n      }, reject)\n    } else {\n      // 但如果这个Promise的状态已经确定了，那么它肯定有一个“正常”的值，而不是一个thenable，所以这里直接取它的状态\n      result.then(resolve, reject)\n    }\n    return\n  } else if (\n    Object.prototype.toString.call(result) === '[object Object]' ||\n    Object.prototype.toString.call(result) === '[object Function]'\n  ) {\n    let then = result.then\n    if (typeof then === 'function') {\n      then.call(\n        result,\n        (val) => {\n          if (called) return\n          called = true\n          resolvePromise(promiseObj, val, resolve, reject)\n        },\n        (reason) => {\n          if (called) return\n          called = true\n          reject(reason)\n        }\n      )\n    } else {\n      if (called) return\n      called = true\n      resolve(result)\n    }\n  } else {\n    resolve(result)\n  }\n}\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n  let self = this\n  onFulfilled =\n    typeof onFulfilled === 'function' ? onFulfilled : (value) => value\n  onRejected =\n    typeof onRejected === 'function'\n      ? onRejected\n      : (reason) => {\n          throw reason\n        }\n  let returnPromise = new MyPromise((resolve, reject) => {\n    if (self.status === status.PENDING) {\n      self.onResolvedCallbacks.push(() => {\n        setTimeout(() => {\n          try {\n            let success = onFulfilled(self.value)\n            resolvePromise(returnPromise, success, resolve, reject)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      })\n      self.onRejectedCallbacks.push(() => {\n        setTimeout(() => {\n          try {\n            let failed = onRejected(self.reason)\n            resolvePromise(returnPromise, failed, resolve, reject)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      })\n    }\n    if (self.status === status.FULFILLED) {\n      setTimeout(() => {\n        try {\n          let success = onFulfilled(self.value)\n          resolvePromise(returnPromise, success, resolve, reject)\n        } catch (err) {\n          reject(err)\n        }\n      }, 0)\n    }\n    if (self.status === status.REJECTED) {\n      setTimeout(() => {\n        try {\n          let failed = onRejected(self.reason)\n          resolvePromise(returnPromise, failed, resolve, reject)\n        } catch (err) {\n          reject(err)\n        }\n      }, 0)\n    }\n  })\n  return returnPromise\n}\n\nMyPromise.prototype.catch = function (onRejected) {\n  return this.then(null, onRejected)\n}\n\nMyPromise.prototype.finally = function (fn) {\n  return this.then(\n    (val) => {\n      fn()\n      return val\n    },\n    (err) => {\n      fn()\n      throw err\n    }\n  )\n}\n\nMyPromise.prototype.all = function (promiseArr) {\n  let len = promiseArr.length\n  let result = []\n  return new MyPromise((resolve, reject) => {\n    promiseArr.forEach((promise, index) => {\n      promise.then((val) => {\n        result[index] = val\n        if (result.length === len) {\n          resolve(result)\n        }\n      }, reject)\n    })\n  })\n}\nMyPromise.prototype.race = function (promiseArr) {\n  return new MyPromise((resolve, reject) => {\n    promiseArr.forEach((promise) => {\n      promise.then((val) => {\n        resolve(val)\n      }, reject)\n    })\n  })\n}\nMyPromise.prototype.cancelable = function (promiseObj, helper) {\n  return MyPromise.race([\n    promiseObj,\n    new MyPromise((resolve, reject) => {\n      helper.cancel = () => {\n        reject(new TypeError('promise cancel'))\n      }\n    })\n  ])\n}\n\nMyPromise.prototype.done = function () {\n  return this.catch((reason) => {\n    throw reason\n  })\n}\n\nMyPromise.prototype.resolve = function (val) {\n  let promiseTmp = new MyPromise((resolve, reject) => {\n    resolvePromise(promiseTmp, val, resolve, reject)\n  })\n  return promiseTmp\n}\n\nMyPromise.prototype.reject = function (reason) {\n  return new MyPromise((resolve, reject) => {\n    reject(reason)\n  })\n}\nMyPromise.prototype.stop = function () {\n  return new MyPromise(() => {})\n}\nMyPromise.prototype.deferred = function () {\n  var dfd = {}\n  dfd.myPromise = new MyPromise((resolve, reject) => {\n    dfd.resolve = resolve\n    dfd.reject = reject\n  })\n  return dfd\n}\nexport default MyPromise\n"],"names":["PENDING","FULFILLED","REJECTED","MyPromise","executor","self","this","reject","reason","status","onRejectedCallbacks","forEach","onRejectedCallback","value","onResolvedCallbacks","resolve","then","onResolvedCallback","err","resolvePromise","promiseObj","result","called","TypeError","val","Object","prototype","toString","call","onFulfilled","onRejected","returnPromise","push","setTimeout","success","failed","catch","finally","fn","all","promiseArr","len","length","promise","index","race","cancelable","helper","cancel","done","promiseTmp","stop","deferred","dfd","myPromise"],"mappings":"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"}